{
  pkgs,
  nixpkgs,
  config,
  lib,
  ...
}: {
  imports = [
    "${nixpkgs}/nixos/modules/installer/sd-card/sd-image.nix"
  ];

  boot.loader = {
    grub.enable = false;
    generic-extlinux-compatible = {
      enable = true;

      # Don't even specify FDTDIR - We do not have the correct DT
      # The DTB is generated by QEMU at runtime
      # useGenerationDeviceTree = false;
    };
  };

  boot.consoleLogLevel = lib.mkDefault 7;

  #raspi
  boot.kernelPackages = pkgs.linuxKernel.packages.linux_rpi4;

  # riscv-qemu
  boot.kernelParams = ["console=tty0" "console=ttyS0,115200n8"];

  sdImage = {
    # raspi firmware. for riscv-qemu this is empty
    populateFirmwareCommands = let
      configTxt = pkgs.writeText "config.txt" ''
        # Prevent the firmware from smashing the framebuffer setup done by the mainline kernel
        # when attempting to show low-voltage or overtemperature warnings.
        avoid_warnings=1

        [pi0]
        kernel=u-boot-rpi0.bin

        [pi1]
        kernel=u-boot-rpi1.bin
      '';
    in ''
      (cd ${pkgs.raspberrypifw}/share/raspberrypi/boot && cp bootcode.bin fixup*.dat start*.elf $NIX_BUILD_TOP/firmware/)
      cp ${pkgs.ubootRaspberryPiZero}/u-boot.bin firmware/u-boot-rpi0.bin
      cp ${pkgs.ubootRaspberryPi}/u-boot.bin firmware/u-boot-rpi1.bin
      cp ${configTxt} firmware/config.txt
    '';

    # common across raspi and riscv-qemu
    populateRootCommands = ''
      mkdir -p ./files/boot
      ${config.boot.loader.generic-extlinux-compatible.populateCmd} -c ${config.system.build.toplevel} -d ./files/boot
    '';
  };
}
